server:
  port: 8080

security:
  jwt:
    secret-key: 'securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure'
    token-prefix: 'Bearer '
    token-expiration-after-days: 14

execution:
  batch-size: 1

cron:
  expression: '0/20 * * ? * *' #Every 10 seconds
#  expression: '0 */10 * ? * *' #Every 10 minutes

spring:
  application:
    name: pipegine-service
  datasource:
    url: jdbc:postgresql://localhost:5432/pipegine?prepareThreshold=0
    username: pipegine-app
    password: pipegine-app
    driver-class-name: org.postgresql.Driver
    type: com.zaxxer.hikari.HikariDataSource
    platform: postgresql
    testWhileIdle: true
    validationQuery: SELECT 1
    hikari:
      connectionTimeout: 5000
      maximumPoolSize: 10
      max-lifetime: 600000
    init:
      always

  servlet:
    multipart:
      max-file-size: 1000MB
      max-request-size: 1000MB


queries:
  sql:
    application-user-dao:
      insert:
        application-user: >
          INSERT INTO pipegine_platform.application_user(id, name, username, password, orcid, github,
            is_account_non_expired, is_account_nonLocked, is_credentials_non_expired, is_enabled)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      select:
        application-user-by-username: >
          SELECT * FROM pipegine_platform.application_user where username=?
        application-user-by-username-or-name: >
          SELECT * FROM pipegine_platform.application_user WHERE username LIKE '%' || ? || '%' OR name LIKE '%' || ? || '%';
        all-application-user-by-group-id: >
          SELECT * FROM pipegine_platform.application_user au
            INNER JOIN pipegine_platform.group_participation gp ON gp.receive_user_id = au.id
          WHERE gp.group_id = ? AND (gp.status='ACCEPTED' OR gp.status='PENDING')

        application-user-by-id: >
          SELECT * FROM pipegine_platform.application_user where id=?
      update:
        application-user: >
          UPDATE pipegine_platform.application_user SET name=?, username=?, orcid=?, github=? WHERE id=?
    project-dao:
      insert:
        project: >
          INSERT INTO pipegine_platform.project(id, name, description, group_id, owner_id) VALUES(?, ?, ?, ?, ?)
        dataset: >
          INSERT INTO pipegine_platform.dataset(id, filename, project_id) VALUES(?, ?, ?)

      select:
        project-by-group-id: >
          SELECT * FROM pipegine_platform.project p WHERE p.group_id=?
        project-by-id: >
          SELECT p.id,
            p.name,
            p.description,
            p.group_id,
            p.owner_id
          FROM pipegine_platform.project p WHERE p.id=?

        project-all: >
          SELECT * FROM pipegine_platform.project

        project-all-by-user: >
          SELECT * FROM pipegine_platform.project p 
          INNER JOIN pipegine_platform.group g ON g.id = p.group_id
          INNER JOIN pipegine_platform.group_participation gp ON gp.group_id = g.id
          WHERE gp.receive_user_id = ? AND gp.status='ACCEPTED'

        project-by-pipeline-id:
            SELECT
                p.id,
                p.name,
                p.description,
                p.group_id,
                p.owner_id
            FROM pipegine_platform.project p
                INNER JOIN pipegine_platform.pipeline pl ON pl.project_id=p.id
            WHERE pl.id=?;

        project-by-group-participation-id:
            SELECT
                p.id,
                p.name,
                p.description,
                p.group_id,
                p.owner_id
            FROM pipegine_platform.project p
                INNER JOIN pipegine_platform.group g ON g.id=p.group_id
                INNER JOIN pipegine_platform.group_participation gp ON gp.group_id=g.id
            WHERE gp.id=? LIMIT 1;

      exists:

        project-id: >
          SELECT EXISTS(SELECT 1 FROM pipegine_platform.project p WHERE p.id=?)

        execution-not-finished: >
          SELECT EXISTS (
              SELECT 1 FROM pipegine_platform.execution e
                  INNER JOIN pipegine_platform.pipeline p on e.pipeline_id = p.id
              WHERE
                  p.project_id=?
                  AND (e.status = 'WAITING' OR e.status = 'IN_PROGRESS')
          )
        is-owner: >
          SELECT EXISTS(SELECT 1 FROM pipegine_platform.project p WHERE p.id=? AND p.owner_id=?)  

      delete:
        project-by-id: >
          DELETE FROM pipegine_platform.project where id=?

      update:
        project: >
          UPDATE pipegine_platform.project SET name=?, description=? WHERE id=?
        project-dataset: >
          UPDATE pipegine_platform.dataset SET filename=? WHERE id=?

    dataset-dao:
      select:
        datasets-by-project-ids: >
          SELECT * FROM pipegine_platform.dataset WHERE project_id = ANY(?);
        datasets-by-project-id: >
          SELECT * FROM pipegine_platform.dataset WHERE project_id = ?;

    pipeline-dao:
      insert:
        pipeline: >
          INSERT INTO pipegine_platform.pipeline(id, project_id, description, status) VALUES(?, ?, ?, ?::pipeline_status)
        pipeline-step: >
          INSERT INTO pipegine_platform.pipeline_step(step_id, pipeline_id, provider_id, input_type, output_type,
            params, step_number) VALUES(?, ?, ?, ?, ?, (to_json(?::jsonb)), ?)
      select:
        pipeline-all: >
          SELECT
            p.id pipeline_id,
            p.description pipeline_description,
            p.status pipeline_status,

            ps.step_id pipeline_step_id,
            ps.provider_id pipeline_step_provider_id,
            ps.input_type pipeline_step_input_type,
            ps.output_type pipeline_step_output_type,
            ps.params pipeline_step_params,
            ps.step_number pipeline_step_number

          FROM pipegine_platform.pipeline p
            INNER JOIN pipegine_platform.pipeline_step ps ON ps.pipeline_id=p.id
          WHERE p.project_id=?

        pipelines-by-project-id: >
          SELECT p.id, p.description, p.status FROM pipegine_platform.pipeline p WHERE p.project_id=?

        pipelines-by-owner-id: >
          SELECT p.id, p.description, p.status FROM pipegine_platform.pipeline p
            INNER JOIN project pr ON pr.id = p.project_id
          WHERE pr.owner_id=?

        pipeline-by-id: >
          SELECT p.id, p.description, p.status FROM pipegine_platform.pipeline p WHERE p.id=?
        pipeline-with-project-id-by-id: >
          SELECT p.id, p.project_id, p.description, p.status 
          FROM pipegine_platform.pipeline p WHERE p.id=?

        pipeline-steps-by-pipeline-id: >
          SELECT
            ps.*,
            p.name provider_name,
            p.description provider_description,
            p.input_supported_types provider_input_supported_types,
            p.output_supported_types provider_output_supported_types
          FROM pipegine_platform.pipeline_step ps
            INNER JOIN pipegine_platform.provider p ON p.id=ps.provider_id
          WHERE ps.pipeline_id=?
        pipeline-steps-all-data-and-service-data-by-pipeline-id: >
          SELECT
            ps.step_id,
            p.name provider_name,
            p.description provider_description,
            ps.input_type,
            ps.output_type,
            ps.params,
            ps.step_number
          FROM pipegine_platform.pipeline_step ps
            INNER JOIN pipegine_platform.provider p ON p.id=ps.provider_id
          WHERE ps.pipeline_id=?
        pipeline-all-data-w/-provider-id: >
          SELECT
            ps.step_id,
            p.id as provider_id,
            p.name as provider_name,
            p.description as provider_description,
            ps.input_type,
            ps.output_type,
            ps.params,
            ps.step_number
          FROM pipegine_platform.pipeline_step ps
            INNER JOIN pipegine_platform.provider p ON p.id=ps.provider_id
          WHERE ps.pipeline_id=?
        pipeline-steps-by-pipeline-ids: >
          SELECT
            ps.*,
            p.name provider_name,
            p.description provider_description,
            p.input_supported_types provider_input_supported_types,
            p.output_supported_types provider_output_supported_types
          FROM pipegine_platform.pipeline_step ps
            INNER JOIN pipegine_platform.provider p ON p.id=ps.provider_id
          WHERE ps.pipeline_id=ANY(?)
      update:
        pipeline-by-id: >
          UPDATE pipegine_platform.pipeline SET description=? WHERE id=?;
        pipeline-step-by-id: >
          UPDATE pipegine_platform.pipeline_step ps
            ps.input_type = ?,
            ps.output_type = ?,
            ps.params = ?,
            ps.step_number = ?
          FROM pipegine_platform.pipeline_step ps
            INNER JOIN pipegine_platform.provider p ON p.id=ps.provider_id
          WHERE ps.pipeline_id=?
        step: >
          UPDATE pipegine_platform.pipeline_step
            SET input_type = ?,
            output_type = ?,
            provider_id = ?,
            params = ?::jsonb,
            step_number = ?
          WHERE step_id=?
      delete:
        pipeline-step-by-id: >
          DELETE FROM pipegine_platform.pipeline_step WHERE step_id=?
    provider-dao:
      insert:
        provider: >
          INSERT INTO pipegine_platform.provider(id, name, description, url, url_source, public, input_supported_types,
            output_supported_types, operations, owner_id) VALUES(?, ?, ?, ?, ?, ?, ?, ?, (to_json(?::jsonb)), ?)
      update:
        provider: >
          UPDATE pipegine_platform.provider SET name=?, description=?, url=?, url_source=?, public=?, input_supported_types=?,
            output_supported_types=?, operations=(to_json(?::jsonb)) WHERE id=?
      select:
        provider-by-id: >
          SELECT * FROM pipegine_platform.provider p WHERE p.id=?

        providers-by-ids: >
          SELECT * FROM pipegine_platform.provider p WHERE p.id=ANY(?)

        provider-all: >
          SELECT * FROM pipegine_platform.provider

        provider-all-by-userId: >
          SELECT DISTINCT pr.*
          FROM pipegine_platform.provider pr
          LEFT JOIN (
              SELECT DISTINCT gp.provider_id
              FROM pipegine_platform.group_provider gp
              LEFT JOIN pipegine_platform.group_participation gpa ON gpa.group_id = gp.group_id
              WHERE gpa.receive_user_id = ? AND gpa.status = 'ACCEPTED'
          ) unique_providers ON pr.id = unique_providers.provider_id
          WHERE pr.public = true
             OR pr.owner_id = ?
             OR (pr.public = false AND unique_providers.provider_id IS NOT NULL)

        provider-all-by-user-and-project-id: >
          SELECT pr.*
          FROM pipegine_platform.provider pr
          LEFT JOIN pipegine_platform.group_provider gp ON pr.id = gp.provider_id
          LEFT JOIN pipegine_platform.project pj ON gp.group_id = pj.group_id
          WHERE pr.public = true
             OR pr.owner_id = ?
             OR (pr.public = false 
                 AND gp.group_id IN (SELECT group_id FROM pipegine_platform.project WHERE id = ?) 
                 AND EXISTS (SELECT 1 FROM pipegine_platform.group_participation gpa 
                             WHERE gpa.group_id = gp.group_id AND gpa.status = 'ACCEPTED'))
      exists:
        is-owner: >
          SELECT EXISTS(SELECT 1 FROM pipegine_platform.provider p WHERE p.id=? AND p.owner_id=?)

    group-provider-dao:

      insert:
        group-provider: >
          INSERT INTO pipegine_platform.group_provider(group_id, provider_id) VALUES(?, ?)

      select:
        group-id-by-provider-id: >
          SELECT group_id FROM pipegine_platform.group_provider WHERE provider_id=?;

      exists:
        group-provider-by-group-id-and-provider-id: >
          SELECT EXISTS(SELECT 1 FROM pipegine_platform.group_provider WHERE group_id=? AND provider_id=?)


    execution-dao:
      insert:
        execution: >
          INSERT INTO pipegine_platform.execution(id, pipeline_id, dataset_id, description, current_step, status)
            VALUES(?, ?, ?, ?, ?, ?::execution_status)

        execution-steps: >
          INSERT INTO pipegine_platform.execution_step(id, execution_id, provider_id, input_type, output_type, state,
            params, step_number) VALUES(?, ?, ?, ?, ?, ?, (to_json(?::jsonb)), ?)
      select:
        execution-by-id: >
          SELECT
            e.id,
            e.description,
            e.result,
            e.error_message,
            e.current_step,
            e.status,
            p.id pipeline_id,
            p.description pipeline_description,
            p.status pipeline_status,
            d.id dataset_id,
            d.filename dataset_filename,
            d.project_id dataset_project_id
          FROM pipegine_platform.execution e
            INNER JOIN pipegine_platform.pipeline p ON p.id=e.pipeline_id
            INNER JOIN pipegine_platform.dataset d ON d.id=e.dataset_id
          WHERE e.id=?

        executions-by-project-id: >
          SELECT
            e.id,
            e.description,
            e.result,
            e.error_message,
            e.current_step,
            e.status,
            p.id pipeline_id,
            p.description pipeline_description,
            p.status pipeline_status,
            d.id dataset_id,
            d.filename dataset_filename,
            d.project_id dataset_project_id
          FROM pipegine_platform.execution e
            INNER JOIN pipegine_platform.pipeline p ON p.id=e.pipeline_id
            INNER JOIN pipegine_platform.project pr ON pr.id=p.project_id
            INNER JOIN pipegine_platform.dataset d ON d.id=e.dataset_id
          WHERE pr.id=? AND d.project_id=pr.id

        executions-by-owner-id: >
          SELECT
            e.id,
            e.description,
            e.result,
            e.error_message,
            e.current_step,
            e.status,
            p.id pipeline_id,
            p.description pipeline_description,
            p.status pipeline_status,
            d.id dataset_id,
            d.filename dataset_filename,
            d.project_id dataset_project_id
          FROM pipegine_platform.execution e
            INNER JOIN pipegine_platform.pipeline p ON p.id=e.pipeline_id
            INNER JOIN pipegine_platform.project pr ON pr.id=p.project_id
            INNER JOIN pipegine_platform.dataset d ON d.id=e.dataset_id
          WHERE pr.owner_id=?

        execution-steps-by-execution-id:
          SELECT
          e.*,
          p.name provider_name,
          p.description provider_description
          FROM pipegine_platform.execution_step e
          INNER JOIN pipegine_platform.provider p ON p.id=e.provider_id
          WHERE e.execution_id=?
          ORDER BY e.step_number ASC;

        execution-steps-by-execution-ids:
          SELECT
          e.*,
          p.name provider_name,
          p.description provider_description
          FROM pipegine_platform.execution_step e
          INNER JOIN pipegine_platform.provider p ON p.id=e.provider_id
          WHERE e.execution_id=ANY(?)

        execution-by-id-and-project-id: >
          SELECT
            e.*,
            p.id pipeline_id,
            p.description pipeline_description,
            p.status pipeline_status,
            d.id dataset_id,
            d.filename dataset_filename,
            d.project_id dataset_project_id
          FROM pipegine_platform.execution e
            INNER JOIN pipegine_platform.pipeline p ON p.id=e.pipeline_id
            INNER JOIN pipegine_platform.dataset d ON d.id=e.dataset_id
          WHERE e.id=? AND p.project_id=?


      update:
        execution: >
          UPDATE pipegine_platform.execution SET description=?, current_step=?, status=?, result=?, error_message=?
            WHERE id=?

        execution-steps: >
          UPDATE pipegine_platform.execution_step SET state=? WHERE id=?

      exists:
        execution-id-step-id-provider-id: >
          SELECT EXISTS (
              SELECT 1 FROM pipegine_platform.execution e
                  INNER JOIN execution_step es on e.id = es.execution_id
              WHERE
                  e.id=?
                  AND e.current_step=es.step_number
                  AND es.id=?
                  -- AND es.provider_id=?
          )
    group-dao:
      insert:
        group: >
          INSERT INTO pipegine_platform.group(id, owner_id) VALUES(?, ?)

      select:
        group-by-project-id: >
          SELECT g.* FROM pipegine_platform.group g
            INNER JOIN pipegine_platform.project p ON p.group_id=g.id
          WHERE p.id=?

        group-by-id: >
          SELECT * FROM pipegine_platform.group g WHERE g.id=?

        groups-by-ids: >
          SELECT * FROM pipegine_platform.group g WHERE g.id=ANY(?)

        group-all: >
          SELECT * FROM pipegine_platform.group

        groups-by-owner-id: >
          SELECT * FROM pipegine_platform.group g WHERE g.owner_id=?

        group-all-owner-or-member: >
          SELECT DISTINCT * 
          FROM pipegine_platform.group g 
            LEFT JOIN pipegine_platform.group_participation gp on g.id=gp.group_id
          WHERE gp.receive_user_id = ? AND gp.status='ACCEPTED'              

      delete:
        group: >
          DELETE FROM pipegine_platform.group WHERE id=?

    group-participation-dao:

      insert:
        group-participation: >
          INSERT INTO pipegine_platform.group_participation(id, group_id, receive_user_id, submitter_user_id, create_date, status) 
          VALUES(?, ?, ?, ?, ?, ?::group_participation_status)
      update:
        group-participation-status: >
          UPDATE pipegine_platform.group_participation SET status=?::group_participation_status WHERE id=?
      select:
        group-participation-by-group-id: >
          SELECT * FROM pipegine_platform.group_participation gp WHERE gp.group_id=?
        group-participation-by-id: >
          SELECT * FROM pipegine_platform.group_participation gp WHERE gp.id=?
        group-participation-by-group-id-and-receiver-id: >
          SELECT * FROM pipegine_platform.group_participation gp WHERE gp.group_id=? AND gp.receive_user_id=?
        group-participation-by-group-id-and-status-accepted: >
          SELECT * FROM pipegine_platform.group_participation gp WHERE gp.group_id=? AND gp.status='ACCEPTED'
        group-participation-by-receiver-id-and-group-id-and-status-peding: >
          SELECT * FROM pipegine_platform.group_participation gp WHERE gp.group_id=? AND gp.receive_user_id=? AND gp.status='PENDING'
        group-participation-by-receiver-id-and-status-pending: >
            SELECT * FROM pipegine_platform.group_participation gp WHERE gp.receive_user_id=? AND gp.status='PENDING'
          

      delete:
        group-participation-by-id: >
          DELETE FROM pipegine_platform.group_participation WHERE id=?

